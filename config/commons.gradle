ext {
    createFolder = { path ->
        def dir = new File(path)
        if (!dir.exists()) {
            dir.mkdirs()
        }
    }

    createFile = { path, filename, file ->
        createFolder(path)
        def dir = new File("${path}/${filename}")
        file.store(dir.newWriter(), null)
    }

    addOAuthAuthenticationProperties = { props ->
        // module:registrationSv => bW9kdWxlOnJlZ2lzdHJhdGlvblN2 (Base64)
        props.setProperty("auth.username", "module")
        props.setProperty("auth.secret", "registrationSv")
        props.setProperty("oauth.token.endpoint", "http://${oauthHost}:${oauthPort}/oauth/check_token")
        return props
    }

    addModulesNames = { props ->
        props.setProperty("modules.serviceDiscoveryModule.name", serviceDiscoveryModuleName)
        props.setProperty("modules.authenticationModule.name", authenticationModuleName)
        props.setProperty("modules.usersModule.name", usersModuleName)
    }

    createBootstrapProperties = { props, buildDir ->
        props.setProperty("spring.application.name", applicationName)
        props.setProperty("server.port", serverPort)
        props.setProperty("jmx.rmi.host", jmxHost)
        props.setProperty("jmx.rmi.port", jmxPort)
        props.setProperty("spring.cloud.config.uri", "http://${configHost}:${configPort}")

        createFile("${buildDir}/${resourcesDir}", "bootstrap.properties", props)
    }

    createCommonProperties = { props ->
        props.setProperty("default.locale", defaultLocale)
        props.setProperty("eureka.client.serviceUrl.defaultZone", "http://${eurekaHost}:${eurekaPort}/eureka/")
        props.setProperty("proxy.url", "http://${proxyHost}:${proxyPort}")
        addOAuthAuthenticationProperties(props)
        addModulesNames(props)

        createFile("ConfigurationModule/config", "${applicationName}.properties", props)
    }

    copyCommonProperties = { buildDir ->
        copy {
            from("../CommonModule/src/main/resources")
            into("${buildDir}${resourcesDir}")
        }
    }
}
